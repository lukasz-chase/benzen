{"ast":null,"code":"import * as api from \"../api\";\nimport { GET_ORDERS, GET_ORDER, GET_USER_ORDERS, CREATE_ORDER, UPDATE_ORDER, START_LOADING_ORDER_DATA, END_LOADING_ORDER_DATA } from \"../constants/actionTypes\";\nexport const getOrders = page => async dispatch => {\n  try {\n    const {\n      data: {\n        data,\n        numberOfPages,\n        currentPage\n      }\n    } = await api.getOrders(page);\n    dispatch({\n      type: GET_ORDERS,\n      payload: {\n        data: data,\n        numberOfPages: numberOfPages,\n        currentPage: currentPage\n      }\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const getOrder = id => async dispatch => {\n  try {\n    dispatch({\n      type: START_LOADING_ORDER_DATA\n    });\n    const orderData = await api.getOrder(id);\n    dispatch({\n      type: GET_ORDER,\n      payload: orderData.data\n    });\n    dispatch({\n      type: END_LOADING_ORDER_DATA\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const getUserOrders = id => async dispatch => {\n  try {\n    const userOrders = await api.getUserOrders(id);\n    dispatch({\n      type: GET_USER_ORDERS,\n      payload: userOrders.data\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const createOrder = orderData => async dispatch => {\n  try {\n    const order = await api.createOrder(orderData);\n    dispatch({\n      type: CREATE_ORDER,\n      payload: order.data\n    });\n    await Promise.all(orderData.cart.map(item => api.decreaseItemAmount(item._id)));\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const updateOrder = (id, status) => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.updateOrder(id, status);\n    dispatch({\n      type: UPDATE_ORDER,\n      payload: data\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};","map":{"version":3,"sources":["C:/Users/lukas/Desktop/Programowanko/Projekty/benzen/client/src/actions/ordersAction.js"],"names":["api","GET_ORDERS","GET_ORDER","GET_USER_ORDERS","CREATE_ORDER","UPDATE_ORDER","START_LOADING_ORDER_DATA","END_LOADING_ORDER_DATA","getOrders","page","dispatch","data","numberOfPages","currentPage","type","payload","error","console","log","getOrder","id","orderData","getUserOrders","userOrders","createOrder","order","Promise","all","cart","map","item","decreaseItemAmount","_id","updateOrder","status"],"mappings":"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","sourcesContent":["import * as api from \"../api\";\r\nimport {\r\n  GET_ORDERS,\r\n  GET_ORDER,\r\n  GET_USER_ORDERS,\r\n  CREATE_ORDER,\r\n  UPDATE_ORDER,\r\n  START_LOADING_ORDER_DATA,\r\n  END_LOADING_ORDER_DATA,\r\n} from \"../constants/actionTypes\";\r\n\r\nexport const getOrders = (page) => async (dispatch) => {\r\n  try {\r\n    const {\r\n      data: { data, numberOfPages, currentPage },\r\n    } = await api.getOrders(page);\r\n    dispatch({\r\n      type: GET_ORDERS,\r\n      payload: {\r\n        data: data,\r\n        numberOfPages: numberOfPages,\r\n        currentPage: currentPage,\r\n      },\r\n    });\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\nexport const getOrder = (id) => async (dispatch) => {\r\n  try {\r\n    dispatch({\r\n      type: START_LOADING_ORDER_DATA,\r\n    });\r\n    const orderData = await api.getOrder(id);\r\n    dispatch({\r\n      type: GET_ORDER,\r\n      payload: orderData.data,\r\n    });\r\n    dispatch({\r\n      type: END_LOADING_ORDER_DATA,\r\n    });\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\nexport const getUserOrders = (id) => async (dispatch) => {\r\n  try {\r\n    const userOrders = await api.getUserOrders(id);\r\n    dispatch({\r\n      type: GET_USER_ORDERS,\r\n      payload: userOrders.data,\r\n    });\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\nexport const createOrder = (orderData) => async (dispatch) => {\r\n  try {\r\n    const order = await api.createOrder(orderData);\r\n    dispatch({\r\n      type: CREATE_ORDER,\r\n      payload: order.data,\r\n    });\r\n    await Promise.all(\r\n      orderData.cart.map((item) => api.decreaseItemAmount(item._id))\r\n    );\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\nexport const updateOrder = (id, status) => async (dispatch) => {\r\n  try {\r\n    const { data } = await api.updateOrder(id, status);\r\n    dispatch({\r\n      type: UPDATE_ORDER,\r\n      payload: data,\r\n    });\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}