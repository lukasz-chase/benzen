{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\lukas\\\\Desktop\\\\Programowanko\\\\Projekty\\\\benzen\\\\client\\\\src\\\\components\\\\AddressComponent.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\"; //styling\n\nimport styled from \"styled-components\"; //data\n\nimport { addressInputs } from \"../descriptions/inputs\"; //components\n\nimport Input from \"../components/Input\";\nimport Button from \"../components/Button\";\nimport Address from \"../components/Address\"; //actions\n\nimport { updateAddress, addAddress } from \"../actions/userActions\"; //redux\n\nimport { useDispatch } from \"react-redux\";\n\nconst AddressComponent = ({\n  user,\n  isLoading,\n  snackbarHandler\n}) => {\n  _s();\n\n  var _user$address3;\n\n  const dispatch = useDispatch();\n  const [addressData, setAddressData] = useState({\n    street: \"\",\n    city: \"\",\n    postalCode: \"\",\n    houseNr: \"\",\n    phone: \"\"\n  });\n  const [addressId, setAddressId] = useState(0);\n  useEffect(() => {\n    if (!isLoading) {\n      var _user$address$;\n\n      setAddressId(user === null || user === void 0 ? void 0 : (_user$address$ = user.address[0]) === null || _user$address$ === void 0 ? void 0 : _user$address$._id);\n    }\n  }, [isLoading, user === null || user === void 0 ? void 0 : user.address]);\n  const [action, setAction] = useState(\"change\"); //handlers\n\n  const clearAddress = () => setAddressData({\n    street: \"\",\n    city: \"\",\n    postalCode: \"\",\n    houseNr: \"\",\n    phone: \"\"\n  });\n\n  const chooseAddressHandler = ({\n    city,\n    houseNr,\n    street,\n    postalCode,\n    phone,\n    _id\n  }) => {\n    setAddressData({\n      street: street,\n      city: city,\n      postalCode: postalCode,\n      houseNr: houseNr,\n      phone: phone\n    });\n    setAction(\"change\");\n    setAddressId(_id);\n  }; //add new address\n\n\n  const newAddressHandler = () => {\n    setAction(\"add\");\n    clearAddress();\n    setAddressId(\"\");\n  };\n\n  const addressHandler = () => {\n    if (addressData.street !== \"\" && addressData.city !== \"\" && addressData.postalCode !== \"\" && addressData.houseNr !== \"\" && addressData.phone !== \"\") {\n      if (action === \"change\") {\n        dispatch(updateAddress(user._id, {\n          address: addressData\n        }));\n        snackbarHandler(\"Address updated successfully\", \"succuess\");\n      } else {\n        dispatch(addAddress(user._id, {\n          address: addressData\n        }));\n        snackbarHandler(\"Address added successfully\", \"succuess\");\n      }\n    } else {\n      snackbarHandler(\"Inputs cant be empty\", \"error\");\n    }\n\n    clearAddress();\n  };\n\n  useEffect(() => {\n    var _user$address;\n\n    if ((user === null || user === void 0 ? void 0 : (_user$address = user.address) === null || _user$address === void 0 ? void 0 : _user$address.length) === 0) {\n      newAddressHandler();\n    }\n  }, [user]);\n  useEffect(() => {\n    var _user$address2;\n\n    user === null || user === void 0 ? void 0 : (_user$address2 = user.address) === null || _user$address2 === void 0 ? void 0 : _user$address2.map(add => add._id === addressId ? chooseAddressHandler(add) : add);\n  }, [user, addressId]);\n\n  const handleForm = e => setAddressData({ ...addressData,\n    [e.target.name]: e.target.value\n  });\n\n  return /*#__PURE__*/_jsxDEV(AddressWrapper, {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"My account\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"line\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Addresses\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"choose-address\",\n      children: user === null || user === void 0 ? void 0 : (_user$address3 = user.address) === null || _user$address3 === void 0 ? void 0 : _user$address3.map(address => /*#__PURE__*/_jsxDEV(Address, {\n        chooseAddressHandler: chooseAddressHandler,\n        address: address,\n        userId: user._id,\n        setAddressId: setAddressId,\n        addressId: addressId\n      }, address._id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"line\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this), action === \"change\" && /*#__PURE__*/_jsxDEV(Button, {\n      onClick: () => newAddressHandler(),\n      label: \"Add new address\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"inputs-grid\",\n      children: addressInputs.map(input => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid-item\",\n        children: /*#__PURE__*/_jsxDEV(Input, {\n          label: input.label,\n          name: input.name,\n          value: addressData[input.name],\n          type: input.type,\n          handleChange: e => handleForm(e),\n          required: input.required\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 13\n        }, this)\n      }, input.label, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: () => addressHandler(),\n      label: action === \"change\" ? \"Save changes\" : \"Add\",\n      variant: \"black\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AddressComponent, \"VKzi26wgvXoeKeEns4k0RIqhweo=\", false, function () {\n  return [useDispatch];\n});\n\n_c = AddressComponent;\nconst AddressWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  margin-left: 0rem;\n  @media screen and (max-width: 1000px) {\n    margin: 0;\n  }\n  .choose-address {\n    display: flex;\n    align-items: start;\n    .active-address {\n      .checkbox {\n        background-color: black;\n      }\n    }\n    .single-address {\n      display: flex;\n      font-size: 0.8rem;\n      &:hover {\n        cursor: pointer;\n      }\n      .checkbox {\n        border: 1px solid rgba(0, 0, 0, 0.2);\n        width: 1rem;\n        height: 1rem;\n        margin: 0 1rem;\n        @media screen and (max-width: 1000px) {\n          width: 1rem;\n          height: 1rem;\n          border-radius: 1rem;\n          margin: 0 0.5rem;\n        }\n      }\n      .address-info {\n        display: flex;\n        flex-direction: column;\n        p {\n          margin: 5px 0;\n          font-weight: bold;\n          &:hover {\n            cursor: pointer;\n          }\n        }\n      }\n    }\n  }\n`;\n_c2 = AddressWrapper;\nexport default AddressComponent;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"AddressComponent\");\n$RefreshReg$(_c2, \"AddressWrapper\");","map":{"version":3,"sources":["C:/Users/lukas/Desktop/Programowanko/Projekty/benzen/client/src/components/AddressComponent.js"],"names":["React","useState","useEffect","styled","addressInputs","Input","Button","Address","updateAddress","addAddress","useDispatch","AddressComponent","user","isLoading","snackbarHandler","dispatch","addressData","setAddressData","street","city","postalCode","houseNr","phone","addressId","setAddressId","address","_id","action","setAction","clearAddress","chooseAddressHandler","newAddressHandler","addressHandler","length","map","add","handleForm","e","target","name","value","input","label","type","required","AddressWrapper","div"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\n//styling\r\nimport styled from \"styled-components\";\r\n//data\r\nimport { addressInputs } from \"../descriptions/inputs\";\r\n//components\r\nimport Input from \"../components/Input\";\r\nimport Button from \"../components/Button\";\r\nimport Address from \"../components/Address\";\r\n//actions\r\nimport { updateAddress, addAddress } from \"../actions/userActions\";\r\n//redux\r\nimport { useDispatch } from \"react-redux\";\r\n\r\nconst AddressComponent = ({ user, isLoading, snackbarHandler }) => {\r\n  const dispatch = useDispatch();\r\n  const [addressData, setAddressData] = useState({\r\n    street: \"\",\r\n    city: \"\",\r\n    postalCode: \"\",\r\n    houseNr: \"\",\r\n    phone: \"\",\r\n  });\r\n  const [addressId, setAddressId] = useState(0);\r\n  useEffect(() => {\r\n    if (!isLoading) {\r\n      setAddressId(user?.address[0]?._id);\r\n    }\r\n  }, [isLoading, user?.address]);\r\n\r\n  const [action, setAction] = useState(\"change\");\r\n  //handlers\r\n  const clearAddress = () =>\r\n    setAddressData({\r\n      street: \"\",\r\n      city: \"\",\r\n      postalCode: \"\",\r\n      houseNr: \"\",\r\n      phone: \"\",\r\n    });\r\n  const chooseAddressHandler = ({\r\n    city,\r\n    houseNr,\r\n    street,\r\n    postalCode,\r\n    phone,\r\n    _id,\r\n  }) => {\r\n    setAddressData({\r\n      street: street,\r\n      city: city,\r\n      postalCode: postalCode,\r\n      houseNr: houseNr,\r\n      phone: phone,\r\n    });\r\n    setAction(\"change\");\r\n    setAddressId(_id);\r\n  };\r\n  //add new address\r\n  const newAddressHandler = () => {\r\n    setAction(\"add\");\r\n    clearAddress();\r\n    setAddressId(\"\");\r\n  };\r\n  const addressHandler = () => {\r\n    if (\r\n      addressData.street !== \"\" &&\r\n      addressData.city !== \"\" &&\r\n      addressData.postalCode !== \"\" &&\r\n      addressData.houseNr !== \"\" &&\r\n      addressData.phone !== \"\"\r\n    ) {\r\n      if (action === \"change\") {\r\n        dispatch(updateAddress(user._id, { address: addressData }));\r\n        snackbarHandler(\"Address updated successfully\", \"succuess\");\r\n      } else {\r\n        dispatch(addAddress(user._id, { address: addressData }));\r\n        snackbarHandler(\"Address added successfully\", \"succuess\");\r\n      }\r\n    } else {\r\n      snackbarHandler(\"Inputs cant be empty\", \"error\");\r\n    }\r\n    clearAddress();\r\n  };\r\n  useEffect(() => {\r\n    if (user?.address?.length === 0) {\r\n      newAddressHandler();\r\n    }\r\n  }, [user]);\r\n  useEffect(() => {\r\n    user?.address?.map((add) =>\r\n      add._id === addressId ? chooseAddressHandler(add) : add\r\n    );\r\n  }, [user, addressId]);\r\n  const handleForm = (e) =>\r\n    setAddressData({ ...addressData, [e.target.name]: e.target.value });\r\n  return (\r\n    <AddressWrapper>\r\n      <h2>My account</h2>\r\n      <div className=\"line\"></div>\r\n      <h2>Addresses</h2>\r\n      <div className=\"choose-address\">\r\n        {user?.address?.map((address) => (\r\n          <Address\r\n            key={address._id}\r\n            chooseAddressHandler={chooseAddressHandler}\r\n            address={address}\r\n            userId={user._id}\r\n            setAddressId={setAddressId}\r\n            addressId={addressId}\r\n          />\r\n        ))}\r\n      </div>\r\n      <div className=\"line\"></div>\r\n      {action === \"change\" && (\r\n        <Button onClick={() => newAddressHandler()} label=\"Add new address\" />\r\n      )}\r\n      <div className=\"inputs-grid\">\r\n        {addressInputs.map((input) => (\r\n          <div key={input.label} className=\"grid-item\">\r\n            <Input\r\n              label={input.label}\r\n              name={input.name}\r\n              value={addressData[input.name]}\r\n              type={input.type}\r\n              handleChange={(e) => handleForm(e)}\r\n              required={input.required}\r\n            />\r\n          </div>\r\n        ))}\r\n      </div>\r\n      <Button\r\n        onClick={() => addressHandler()}\r\n        label={action === \"change\" ? \"Save changes\" : \"Add\"}\r\n        variant=\"black\"\r\n      />\r\n    </AddressWrapper>\r\n  );\r\n};\r\n\r\nconst AddressWrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  margin-left: 0rem;\r\n  @media screen and (max-width: 1000px) {\r\n    margin: 0;\r\n  }\r\n  .choose-address {\r\n    display: flex;\r\n    align-items: start;\r\n    .active-address {\r\n      .checkbox {\r\n        background-color: black;\r\n      }\r\n    }\r\n    .single-address {\r\n      display: flex;\r\n      font-size: 0.8rem;\r\n      &:hover {\r\n        cursor: pointer;\r\n      }\r\n      .checkbox {\r\n        border: 1px solid rgba(0, 0, 0, 0.2);\r\n        width: 1rem;\r\n        height: 1rem;\r\n        margin: 0 1rem;\r\n        @media screen and (max-width: 1000px) {\r\n          width: 1rem;\r\n          height: 1rem;\r\n          border-radius: 1rem;\r\n          margin: 0 0.5rem;\r\n        }\r\n      }\r\n      .address-info {\r\n        display: flex;\r\n        flex-direction: column;\r\n        p {\r\n          margin: 5px 0;\r\n          font-weight: bold;\r\n          &:hover {\r\n            cursor: pointer;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport default AddressComponent;\r\n"]},"metadata":{},"sourceType":"module"}