{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\lukas\\\\Desktop\\\\Programowanko\\\\Projekty\\\\benzen\\\\client\\\\src\\\\components\\\\AddressComponent.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\"; //styling\n\nimport styled from \"styled-components\"; //data\n\nimport { addressInputs } from \"../descriptions/inputs\"; //material ui\n\nimport Checkbox from \"@material-ui/core/Checkbox\"; //components\n\nimport Input from \"../components/Input\";\nimport Button from \"../components/Button\"; //actions\n\nimport { updateAddress, deleteAddress, addAddress } from \"../actions/userActions\"; //redux\n\nimport { useDispatch } from \"react-redux\";\n\nconst AddressComponent = ({\n  user\n}) => {\n  _s();\n\n  var _user$address2;\n\n  const [addressData, setAddressData] = useState({\n    street: \"\",\n    city: \"\",\n    postalCode: \"\",\n    houseNr: \"\",\n    phone: \"\"\n  });\n  const [checkbox, setCheckbox] = useState(false);\n  const [action, setAction] = useState(\"change\");\n  const dispatch = useDispatch(); //handlers\n\n  const clearAddress = () => setAddressData({\n    street: \"\",\n    city: \"\",\n    postalCode: \"\",\n    houseNr: \"\"\n  });\n\n  const chooseAddressHandler = (city, houseNr, street, postalCode, phone) => {\n    setAddressData({\n      street: street,\n      city: city,\n      postalCode: postalCode,\n      houseNr: houseNr,\n      phone: phone\n    });\n    setAction(\"change\");\n    setCheckbox(false);\n  }; //add new address\n\n\n  const newAddressHandler = () => {\n    setCheckbox(true);\n    setAction(\"add\");\n    clearAddress();\n  };\n\n  const updateAddressHandler = () => {\n    dispatch(updateAddress(user._id, {\n      address: addressData\n    }));\n    clearAddress();\n  };\n\n  const addAddressHandler = () => {\n    dispatch(addAddress(user._id, {\n      address: addressData\n    }));\n    clearAddress();\n  };\n\n  useEffect(() => {\n    var _user$address;\n\n    if ((user === null || user === void 0 ? void 0 : (_user$address = user.address) === null || _user$address === void 0 ? void 0 : _user$address.length) === 0) {\n      newAddressHandler();\n    }\n  }, [user]);\n\n  const checkboxHandler = e => {\n    setCheckbox(e.target.checked);\n\n    if (checkbox === false) {\n      newAddressHandler();\n    }\n  };\n\n  const handleForm = e => setAddressData({ ...addressData,\n    [e.target.name]: e.target.value\n  });\n\n  return /*#__PURE__*/_jsxDEV(AddressWrapper, {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"My account\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"line\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Addresses\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"choose-address\",\n      children: [user === null || user === void 0 ? void 0 : (_user$address2 = user.address) === null || _user$address2 === void 0 ? void 0 : _user$address2.map(address => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"single-address\",\n        onClick: () => chooseAddressHandler(address.city, address.houseNr, address.street, address.postalCode, address.phone, address._id),\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"checkbox\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"address-info\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: [address.name, \" \", address.surname]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [address.street, \" \", address.houseNr]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [address.postalCode, \" \", address.city]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [\" Tel. \", address.phone]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            onClick: () => dispatch(deleteAddress(user._id, address._id)),\n            children: \"Delete address\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 13\n        }, this)]\n      }, address._id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 11\n      }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"address\",\n        children: [/*#__PURE__*/_jsxDEV(Checkbox, {\n          checked: checkbox,\n          onChange: checkboxHandler,\n          color: \"primary\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            fontSize: \"0.8rem\",\n            padding: \"1rem 0\"\n          },\n          onClick: () => newAddressHandler(),\n          children: \"Add new address\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"line\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"inputs-grid\",\n      children: addressInputs.map(input => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid-item\",\n        children: /*#__PURE__*/_jsxDEV(Input, {\n          label: input.label,\n          name: input.name,\n          value: addressData[input.name],\n          type: input.type,\n          handleChange: e => handleForm(e),\n          required: input.required\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 13\n        }, this)\n      }, input.label, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: () => addressHandler(),\n      label: action === \"change\" ? \"Save changes\" : \"Add\",\n      variant: \"black\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AddressComponent, \"5J47/nLxQTd6Ni6gLTVu6ec2SVc=\", false, function () {\n  return [useDispatch];\n});\n\n_c = AddressComponent;\nconst AddressWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  margin-left: 2rem;\n  @media screen and (max-width: 1000px) {\n    margin: 0;\n  }\n  .choose-address {\n    display: flex;\n    align-items: start;\n    .active-address {\n      .checkbox {\n        background-color: black;\n      }\n    }\n    .single-address {\n      display: flex;\n      font-size: 0.8rem;\n      &:hover {\n        cursor: pointer;\n      }\n      .checkbox {\n        border: 1px solid rgba(0, 0, 0, 0.2);\n        width: 1rem;\n        height: 1rem;\n        margin: 0 1rem;\n        @media screen and (max-width: 1000px) {\n          width: 1rem;\n          height: 1rem;\n          border-radius: 1rem;\n          margin: 0 0.5rem;\n        }\n      }\n      .address-info {\n        display: flex;\n        flex-direction: column;\n        p {\n          margin: 5px 0;\n          font-weight: bold;\n          &:hover {\n            cursor: pointer;\n          }\n        }\n      }\n    }\n  }\n  .button-white {\n    @media screen and (max-width: 1000px) {\n      display: flex;\n      text-transform: upperCase;\n      justify-content: center;\n      width: 100%;\n      background-color: black;\n      margin: 1rem 0;\n      padding: 0;\n      font-size: 1.5rem;\n      color: White;\n    }\n  }\n`;\n_c2 = AddressWrapper;\nexport default AddressComponent;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"AddressComponent\");\n$RefreshReg$(_c2, \"AddressWrapper\");","map":{"version":3,"sources":["C:/Users/lukas/Desktop/Programowanko/Projekty/benzen/client/src/components/AddressComponent.js"],"names":["React","useState","useEffect","styled","addressInputs","Checkbox","Input","Button","updateAddress","deleteAddress","addAddress","useDispatch","AddressComponent","user","addressData","setAddressData","street","city","postalCode","houseNr","phone","checkbox","setCheckbox","action","setAction","dispatch","clearAddress","chooseAddressHandler","newAddressHandler","updateAddressHandler","_id","address","addAddressHandler","length","checkboxHandler","e","target","checked","handleForm","name","value","map","surname","fontSize","padding","input","label","type","required","addressHandler","AddressWrapper","div"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\n//styling\r\nimport styled from \"styled-components\";\r\n//data\r\nimport { addressInputs } from \"../descriptions/inputs\";\r\n//material ui\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\n//components\r\nimport Input from \"../components/Input\";\r\nimport Button from \"../components/Button\";\r\n//actions\r\nimport {\r\n  updateAddress,\r\n  deleteAddress,\r\n  addAddress,\r\n} from \"../actions/userActions\";\r\n//redux\r\nimport { useDispatch } from \"react-redux\";\r\n\r\nconst AddressComponent = ({ user }) => {\r\n  const [addressData, setAddressData] = useState({\r\n    street: \"\",\r\n    city: \"\",\r\n    postalCode: \"\",\r\n    houseNr: \"\",\r\n    phone: \"\",\r\n  });\r\n  const [checkbox, setCheckbox] = useState(false);\r\n  const [action, setAction] = useState(\"change\");\r\n  const dispatch = useDispatch();\r\n  //handlers\r\n  const clearAddress = () =>\r\n    setAddressData({\r\n      street: \"\",\r\n      city: \"\",\r\n      postalCode: \"\",\r\n      houseNr: \"\",\r\n    });\r\n  const chooseAddressHandler = (city, houseNr, street, postalCode, phone) => {\r\n    setAddressData({\r\n      street: street,\r\n      city: city,\r\n      postalCode: postalCode,\r\n      houseNr: houseNr,\r\n      phone: phone,\r\n    });\r\n    setAction(\"change\");\r\n    setCheckbox(false);\r\n  };\r\n  //add new address\r\n  const newAddressHandler = () => {\r\n    setCheckbox(true);\r\n    setAction(\"add\");\r\n    clearAddress();\r\n  };\r\n  const updateAddressHandler = () => {\r\n    dispatch(updateAddress(user._id, { address: addressData }));\r\n    clearAddress();\r\n  };\r\n  const addAddressHandler = () => {\r\n    dispatch(addAddress(user._id, { address: addressData }));\r\n    clearAddress();\r\n  };\r\n  useEffect(() => {\r\n    if (user?.address?.length === 0) {\r\n      newAddressHandler();\r\n    }\r\n  }, [user]);\r\n  const checkboxHandler = (e) => {\r\n    setCheckbox(e.target.checked);\r\n    if (checkbox === false) {\r\n      newAddressHandler();\r\n    }\r\n  };\r\n  const handleForm = (e) =>\r\n    setAddressData({ ...addressData, [e.target.name]: e.target.value });\r\n  return (\r\n    <AddressWrapper>\r\n      <h2>My account</h2>\r\n      <div className=\"line\"></div>\r\n      <h2>Addresses</h2>\r\n      <div className=\"choose-address\">\r\n        {user?.address?.map((address) => (\r\n          <div\r\n            key={address._id}\r\n            className=\"single-address\"\r\n            onClick={() =>\r\n              chooseAddressHandler(\r\n                address.city,\r\n                address.houseNr,\r\n                address.street,\r\n                address.postalCode,\r\n                address.phone,\r\n                address._id\r\n              )\r\n            }\r\n          >\r\n            <div className=\"checkbox\"></div>\r\n            <div className=\"address-info\">\r\n              <span>\r\n                {address.name} {address.surname}\r\n              </span>\r\n              <span>\r\n                {address.street} {address.houseNr}\r\n              </span>\r\n              <span>\r\n                {address.postalCode} {address.city}\r\n              </span>\r\n              <span> Tel. {address.phone}</span>\r\n              <p onClick={() => dispatch(deleteAddress(user._id, address._id))}>\r\n                Delete address\r\n              </p>\r\n            </div>\r\n          </div>\r\n        ))}\r\n        <div className=\"address\">\r\n          <Checkbox\r\n            checked={checkbox}\r\n            onChange={checkboxHandler}\r\n            color=\"primary\"\r\n          />\r\n          <span\r\n            style={{ fontSize: \"0.8rem\", padding: \"1rem 0\" }}\r\n            onClick={() => newAddressHandler()}\r\n          >\r\n            Add new address\r\n          </span>\r\n        </div>\r\n      </div>\r\n      <div className=\"line\"></div>\r\n      <div className=\"inputs-grid\">\r\n        {addressInputs.map((input) => (\r\n          <div key={input.label} className=\"grid-item\">\r\n            <Input\r\n              label={input.label}\r\n              name={input.name}\r\n              value={addressData[input.name]}\r\n              type={input.type}\r\n              handleChange={(e) => handleForm(e)}\r\n              required={input.required}\r\n            />\r\n          </div>\r\n        ))}\r\n      </div>\r\n      <Button\r\n        onClick={() => addressHandler()}\r\n        label={action === \"change\" ? \"Save changes\" : \"Add\"}\r\n        variant=\"black\"\r\n      />\r\n    </AddressWrapper>\r\n  );\r\n};\r\n\r\nconst AddressWrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  margin-left: 2rem;\r\n  @media screen and (max-width: 1000px) {\r\n    margin: 0;\r\n  }\r\n  .choose-address {\r\n    display: flex;\r\n    align-items: start;\r\n    .active-address {\r\n      .checkbox {\r\n        background-color: black;\r\n      }\r\n    }\r\n    .single-address {\r\n      display: flex;\r\n      font-size: 0.8rem;\r\n      &:hover {\r\n        cursor: pointer;\r\n      }\r\n      .checkbox {\r\n        border: 1px solid rgba(0, 0, 0, 0.2);\r\n        width: 1rem;\r\n        height: 1rem;\r\n        margin: 0 1rem;\r\n        @media screen and (max-width: 1000px) {\r\n          width: 1rem;\r\n          height: 1rem;\r\n          border-radius: 1rem;\r\n          margin: 0 0.5rem;\r\n        }\r\n      }\r\n      .address-info {\r\n        display: flex;\r\n        flex-direction: column;\r\n        p {\r\n          margin: 5px 0;\r\n          font-weight: bold;\r\n          &:hover {\r\n            cursor: pointer;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n  .button-white {\r\n    @media screen and (max-width: 1000px) {\r\n      display: flex;\r\n      text-transform: upperCase;\r\n      justify-content: center;\r\n      width: 100%;\r\n      background-color: black;\r\n      margin: 1rem 0;\r\n      padding: 0;\r\n      font-size: 1.5rem;\r\n      color: White;\r\n    }\r\n  }\r\n`;\r\n\r\nexport default AddressComponent;\r\n"]},"metadata":{},"sourceType":"module"}